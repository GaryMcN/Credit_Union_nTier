--creating the tables required first
--user table for login

CREATE TABLE Users
(
UserID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
UserName NVARCHAR(50),
Password NVARCHAR(50)
);

CREATE TABLE Customers
(
CustomerID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
FirstName NVARCHAR(50),
Surname NVARCHAR(50),
Email NVARCHAR(50),
Phone NVARCHAR(50),
Address1 NVARCHAR(50),
Address2 NVARCHAR(50),
City NVARCHAR(50),
County NVARCHAR(50)
);

--account table
CREATE TABLE Accounts
(
AccountID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID),
AccountType NVARCHAR(50),
AccountNumber INT,
SortCode INT DEFAULT 101010,
InitialBalance INT,
OverdraftLimit INT DEFAULT 0
);

-- transaction table
CREATE TABLE Transactions
(
TransactionID INT IDENTITY(1,1) PRIMARY KEY,
AccountID INT FOREIGN KEY REFERENCES Accounts(AccountID),
Amount INT,
Type NVARCHAR(50),
Description NVARCHAR(250),
TransactionTimeStamp DATETIME
);
ALTER TABLE Transactions ADD CONSTRAINT df_Transactions DEFAULT GETDATE() FOR TransactionTimeStamp

--transfer table
CREATE TABLE Transfers
(
TransferID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
TransactionDebitID INT FOREIGN KEY REFERENCES Transactions(TransactionID),
TransactionCreditID INT FOREIGN KEY REFERENCES Transactions(TransactionID),
RecipientName NVARCHAR(50),
DestinationSortCode INT,
DestinationAccountNumber INT,
);

-- inserting into tables now 
INSERT INTO Users(UserName, Password)
VALUES('Joe', 'joe'), 
('Gary', 'gary'), 
('John', 'john'), 
('Kelly', 'Kelly'),
('Laura', 'laura')

INSERT INTO Customers(FirstName, Surname, Email, Phone, Address1, Address2, City, County)
VALUES	('Mitchael', 'Smith', 'Mitch@gmail.com', '0870567687', '45 Goldsmith Street', 'Phibsborough', 'Dublin 7', 'Dublin'),
	  	('Sally', 'Bacon', 'SBacon@gmail.com', '0850657890', 'number 5', 'Upper Lessonstreet', 'Dublin 4', 'Dublin'),
	  	('Tod', 'Weiner', 'SBacon@gmail.com', '0870534865', 'number 15', 'Deer Park', 'Cork', 'Cork')

INSERT INTO Accounts(CustomerID, AccountType, AccountNumber, SortCode, InitialBalance, OverdraftLimit)
VALUES	(1,'Savings', 43213456, 111111,500, 0),
		(2,'Savings', 21325467, 111111,300, 0),
		(3,'Current', 08965478, 111111,100, 500),
		(3,'Savings', 43536235, 111111,5000, 0),
		(2,'Current', 65748679, 111111,900, 750)

INSERT INTO Transactions(AccountID, Amount, Type, Description)
VALUES	(1, 500, 'lodgement', 'initial lodgement'),
		(1, 600, 'lodgement', 'Cash lodgement'),
		(2, 300, 'lodgement', 'initial lodgement'),
		(2, -100, 'transfer', 'transfer to tod weiner'),
		(3, 100, 'lodgement', 'initial lodgement'),
		(3, -50, 'withdrawal', 'Cash withdrawal'),
		(4, 5000, 'lodgement', 'initial lodgement'),
		(4, 100, 'transfer', 'transfer from sally bacon'),
		(5, 900, 'lodgement', 'initial lodgement'),
		(5, -500, 'transfer', 'transfer to external account')

INSERT INTO Transfers(TransactionDebitID,TransactionCreditID,RecipientName, DestinationSortCode, DestinationAccountNumber)
VALUES	(4,8, 'Sally Bacon', 111111, 43536235 ),
		(10, NULL, 'external account John Smith', 101010, 12340987)

--STORED PROCEDURES
--Add Procedures
--Users
CREATE PROCEDURE spAddUser
	@UserName	NVARCHAR(50),
	@Password	NVARCHAR(50),
	@UserID		INTEGER OUTPUT
AS
BEGIN
	INSERT INTO Users
		(	UserName,
			Password,
			UserID	)
	VALUES
		(	@UserName,
			@Password)
	SELECT
		--@@IDENTITY should not be used need to refactor to OUTPUT
		@UserID = @@IDENTITY
END
GO

--Customers
CREATE PROCEDURE spAddCustomer
	@FirstName 		NVARCHAR(50),
	@Surname 		NVARCHAR(50),
	@Email 			NVARCHAR(50),
	@Phone 			NVARCHAR(50),
	@Address1 		NVARCHAR(50),
	@Address2 		NVARCHAR(50),
	@City 			NVARCHAR(50),
	@County 		NVARCHAR(50),
	@CustomerID 	INTEGER OUTPUT
AS
BEGIN
	INSERT INTO Customers
		(	FirstName,
			Surname,
			Email,
			Phone,
			Address1,
			Address2,
			City,
			County)
	VALUES
		(	@FirstName,
			@Surname,
			@Email,
			@Phone,
			@Address1,
			@Address2,
			@City,
			@County	)
	SELECT
		--@@IDENTITY should not be used need to refactor to OUTPUT
		@CustomerID = @@IDENTITY

END
GO

--Accounts
CREATE PROCEDURE spAddAccount
	@CustomerID 		INT,
	@AccountType 		NVARCHAR(50),
	@AccountNumber 		INT,
	@SortCode 			INT,
	@InitialBalance 	INT,
	@OverdraftLimit 	INT,
	@AccountID 			INT OUTPUT
AS
BEGIN
	INSERT INTO Accounts
		(	CustomerID,
			AccountType,
			AccountNumber,
			SortCode,
			InitialBalance,
			OverdraftLimit	)
	VALUES
		(	@CustomerID,
			@AccountType,
			@AccountNumber,
			@SortCode,
			@InitialBalance,
			@OverdraftLimit)
	SELECT
		@AccountID = @@IDENTITY
END
GO

--Transactions
CREATE PROCEDURE spAddTransaction
	@AccountID 				INT,
	@Amount 				INT,
	@Type 					NVARCHAR(50),
	@Description 			NVARCHAR(250),
	@TransactionTimeStamp 	DATETIME,
	@TransactionID 			INT OUTPUT
AS
BEGIN
	INSERT INTO Transactions
		(	AccountID,
			Amount,
			Type,
			Description,
			TransactionTimeStamp)
	VALUES
		(	@AccountID,
			@Amount,
			@Type,
			@Description,
			@TransactionTimeStamp)
	SELECT
		@TransactionID = @@IDENTITY
END
GO

--Transfers
CREATE PROCEDURE spAddTransfer
	@TransactionDebitID 		INT,
	@TransactionCreditID 		INT,
	@RecipientName 				NVARCHAR(50),
	@DestinationSortCode 		INT,
	@DestinationAccountNumber 	INT,
	@TransferID 				INT OUTPUT
AS
BEGIN
	INSERT INTO Transfers
		(	TransactionDebitID,
			TransactionCreditID,
			RecipientName,
			DestinationSortCode,
			DestinationAccountNumber,
			TransferID)
	VALUES
		(	@TransactionDebitID,
			@TransactionCreditID,
			@RecipientName,
			@DestinationSortCode,
			@DestinationAccountNumber,
			@TransferID)
	SELECT
		@TransactionID = @@IDENTITY
END
GO

-- Get Procedures 
-- Users
CREATE PROCEDURE spGetUser
	@UserID	INTEGER
AS
BEGIN
	SET NOCOUNT ON;
	SELECT
		UserID,
		UserName,
		Password
	FROM
		Users
END
GO

-- Customers
CREATE PROCEDURE spGetCustomer
	@CustomerID INTEGER
AS
BEGIN
	SET NOCOUNT ON;
	SELECT
		CustomerID,
		FirstName,
		Surname,
		Email,
		Phone,
		Address1,
		Address2,
		City,
		County
	FROM
		Customers
END
GO

-- getCusomerAccount
CREATE PROCEDURE spGetCustomerAccounts
	@CustomerID INTEGER
AS
BEGIN
	SET NOCOUNT ON;
	SELECT
		FirstName,
		Surname,
		Email,
		Phone,
		AccountType,
		AccountNumber,
		SortCode,
		InitialBalance,
		OverdraftLimit
	FROM
		Customers INNER JOIN Accounts 
	ON 
		Customers.CustomerID=Accounts.AccountID
	WHERE
		Customers.CustomerID = @CustomerID
END